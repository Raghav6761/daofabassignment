{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ParentService {\n  constructor(http) {\n    this.http = http;\n    this.parentUrl = 'assets/Parent.json';\n  }\n  // functions call the json data using HttpClient and returns only response.data, because that's all we need.\n  // getParentTransactions(): Observable<ParentTransaction[]> {\n  getParentTransactions(page, sort) {\n    let params = new HttpParams().set('page', page.toString()).set('pageSize', '2').set('sort', sort);\n    return this.http.get(`${this.parentUrl}/`, {\n      params\n    }).pipe(map(response => response.data));\n  }\n  getAllParentTransactions() {\n    return this.http.get(this.parentUrl).pipe(map(response => response.data));\n  }\n}\nParentService.ɵfac = function ParentService_Factory(t) {\n  return new (t || ParentService)(i0.ɵɵinject(i1.HttpClient));\n};\nParentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParentService,\n  factory: ParentService.ɵfac,\n  providedIn: 'root'\n});\nexport { ParentService };","map":{"version":3,"names":["HttpParams","map","ParentService","constructor","http","parentUrl","getParentTransactions","page","sort","params","set","toString","get","pipe","response","data","getAllParentTransactions","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\angular\\daofabassignment\\src\\app\\parent.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, Subject} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ParentTransaction } from './parent.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ParentService {\n  private parentUrl = 'assets/Parent.json';\n\n  constructor(private http: HttpClient) {}\n\n  // functions call the json data using HttpClient and returns only response.data, because that's all we need.\n  // getParentTransactions(): Observable<ParentTransaction[]> {\n  getParentTransactions(page: number, sort: string): Observable<ParentTransaction[]> {\n    let params = new HttpParams()\n      .set('page', page.toString())\n      .set('pageSize', '2')\n      .set('sort', sort);\n    return this.http.get<ParentTransaction[]>(`${this.parentUrl}/`, { params }).pipe(\n      map((response: any) => response.data)\n    );\n  }\n\n  getAllParentTransactions(): Observable<ParentTransaction[]> {\n    return this.http.get<ParentTransaction[]>(this.parentUrl).pipe(\n      map((response: any) => response.data)\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MAGaC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,SAAS,GAAG,oBAAoB;EAED;EAEvC;EACA;EACAC,qBAAqBA,CAACC,IAAY,EAAEC,IAAY;IAC9C,IAAIC,MAAM,GAAG,IAAIT,UAAU,EAAE,CAC1BU,GAAG,CAAC,MAAM,EAAEH,IAAI,CAACI,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CACpBA,GAAG,CAAC,MAAM,EAAEF,IAAI,CAAC;IACpB,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAAsB,GAAG,IAAI,CAACP,SAAS,GAAG,EAAE;MAAEI;IAAM,CAAE,CAAC,CAACI,IAAI,CAC9EZ,GAAG,CAAEa,QAAa,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACtC;EACH;EAEAC,wBAAwBA,CAAA;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACQ,GAAG,CAAsB,IAAI,CAACP,SAAS,CAAC,CAACQ,IAAI,CAC5DZ,GAAG,CAAEa,QAAa,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACtC;EACH;;AArBWb,aAAa,C;mBAAbA,aAAa,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAblB,aAAa,C;SAAbA,aAAa;EAAAmB,OAAA,EAAbnB,aAAa,CAAAoB,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAEPrB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}